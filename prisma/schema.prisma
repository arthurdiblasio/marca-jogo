// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sport {
  id   String @id @default(cuid())
  name String @unique

  teams Team[]
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String // üîê ser√° armazenado com hash (bcrypt, argon2)
  phone            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  isEmailVerified  Boolean   @default(false)
  verificationCode String?
  codeExpiresAt    DateTime?

  // relacionamento
  teams   Team[]
  Account Account[]
  Session Session[]
}

model Team {
  id           String    @id @default(uuid())
  name         String
  abbreviation String?
  logo         String?
  foundedAt    DateTime?
  history      String?
  hasField     Boolean   @default(false)
  fieldName    String?
  fieldAddress String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  sportId String
  sport   Sport  @relation(fields: [sportId], references: [id])

  @@unique([ownerId, name, sportId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
